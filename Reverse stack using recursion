Approach 1 using another stack
class Solution{
public:
    void Solve(stack<int> St,stack<int> &s){
        if(St.empty()){
            return;
        }
        s.push(St.top());
        St.pop();
        Solve(St,s);
        
    } 
    stack<int> Reverse(stack<int> St){
        stack<int> s;
         Solve(St,s);
         return s;
       
    }
    
    Approach 2 Using InsertBottom function
    class Solution{
public:
void insertAtBottom(stack<int> &s,int val){
    if(s.empty()){
        s.push(val);
        return;
    }
     int num=s.top();
     s.pop();
     insertAtBottom(s,val);
     s.push(num);
     
}
    void Solve(stack<int> &St){
        if(St.empty()){
            return;
        }
        int num=St.top();
        St.pop();
        Solve(St);
       insertAtBottom(St,num);
        
    } 
    stack<int> Reverse(stack<int> St){
         Solve(St);
         return St;
       
    }
};

// { Driver Code Starts.


int main(){
    int T;
    cin>>T;
    while(T--){
        int N;
        cin>>N;
        stack<int> St;
        for(int i=0;i<N;i++){
            int x;
            cin>>x;
            St.push(x);
        }
        Solution ob;
        stack<int> ans=ob.Reverse(St);
        vector<int> v;
        while(ans.size()){
            v.push_back(ans.top());
            ans.pop();
        }
        reverse(v.begin(),v.end());
        for(int i=0;i<N;i++){
            cout<<v[i];
            if(i!=N-1) cout<<" ";
        }
        cout<<endl;
    }
}  // } Driver Code Ends
